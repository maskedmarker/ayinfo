<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.cjh.ayinfo.entity.Employee">
	<resultMap type="org.cjh.ayinfo.entity.Employee" id="EmployeeMap">
		<result column="EMPLOYEE_ID" property="employeeId" />
		<result column="EMPLOYEE_NAME" property="employeeName" />
		<result column="GENDER" property="gender" />
		<result column="BIRTHDAY" property="birthday" />
		<result column="AGE" property="age" />
		<result column="ZODIAC" property="zodiac" />
		<result column="HEIGHT" property="height" />
		<result column="WEIGHT" property="weight" />
		<result column="PROVINCE" property="province" />
		<result column="ID_NO" property="idNo" />
		<result column="MOBILE_NO" property="mobileNo" />
		<result column="EDUCATION" property="education" />
		<result column="WORKING_AGE" property="workingAge" />
		<result column="EXPECTED_PAY" property="expectedPay" />
 		<result column="TAG" property="tag" />
		<result column="WORK_TYPE" property="workType" />
		<result column="CERTIFICATION" property="certification" />
		<result column="HEAD" property="pictureId" />
		<result column="ADDED_DATE" property="addedDate" />
		<result column="ADDED_BY" property="addedBy" />
		<result column="UPDATED_DATE" property="updatedDate" />
		<result column="UPDATED_BY" property="updatedBy" />
	</resultMap>

	<select id="getById" parameterType="java.lang.Integer" resultMap="EmployeeMap">
	   select * from employee where employee_Id = #{employeeId}
	</select>
	
	<select id="getList" parameterType="org.cjh.ayinfo.entity.Employee" resultMap="EmployeeMap">
	    select * from employee
		<where>
	        <trim prefixOverrides="and">
			    <if test="employeeId != null">and employee_Id = #{employeeId}</if>
			    <if test="employeeName != null">and employee_Name =#{employeeName}</if>
			    <if test="gender != null">and gender = #{gender}</if>
			    <if test="birthday != null">and birthday = #{birthday}</if>
			    <if test="age != null">and age = #{age}</if>
			    <if test="zodiac != null">and zodiac = #{zodiac}</if>
			    <if test="province != null">and province = #{province}</if>
			    <if test="mobileNo != null">and mobile_No = #{mobileNo}</if>
			    <if test="education != null">and education = #{education}</if>
	        </trim>
		</where>
	</select>
	
	<select id="getPageList" parameterType="map" resultMap="EmployeeMap">
	    select * from employee
		<where>
		    <if test="param != null">
		        <trim prefixOverrides="and">
				    <if test="param.employeeId != null">and employee_Id = #{param.employeeId}</if>
				    <if test="param.employeeName != null">and employee_Name =#{param.employeeName}</if>
				    <if test="param.gender != null">and gender = #{param.gender}</if>
				    <if test="param.birthday != null">and birthday = #{param.birthday}</if>
				    <if test="param.age != null">and age = #{param.age}</if>
				    <if test="param.zodiac != null">and zodiac = #{param.zodiac}</if>
				    <if test="param.province != null">and province = #{param.province}</if>
				    <if test="param.idNo != null">and id_no = #{param.idNo}</if>
				    <if test="param.mobileNo != null">and mobile_No = #{param.mobileNo}</if>
				    <if test="param.education != null">and education = #{param.education}</if>
		        </trim>
		    </if>
		</where>
		order by employee_Id
		limit #{offset},#{rows}
	</select>
	
	<select id="getFuzzyPageList" parameterType="map" resultMap="EmployeeMap">
		select *
		from (
			    select * from employee
				<where>
				    <if test="param != null">
				        <trim prefixOverrides="and">
						    <if test="param.employeeName != null">and employee_Name like concat('%', #{param.employeeName}, '%')</if>
						    <if test="param.gender != null">and gender = #{param.gender}</if>
						    <if test="param.birthdayMin != null">and birthday <![CDATA[>=]]> #{param.birthdayMin}</if>
						    <if test="param.birthdayMax != null">and birthday <![CDATA[<=]]> #{param.birthdayMax}</if>
						    <if test="param.ageMin != null">and age <![CDATA[>=]]> #{param.ageMin}</if>
						    <if test="param.ageMax != null">and age <![CDATA[<=]]> #{param.ageMax}</if>
						    <if test="param.heightMin != null">and height <![CDATA[>=]]> #{param.heightMin}</if>
						    <if test="param.heightMax != null">and height <![CDATA[<=]]> #{param.heightMax}</if>
						    <if test="param.weightMin != null">and weight <![CDATA[>=]]> #{param.weightMin}</if>
						    <if test="param.weightMax != null">and weight <![CDATA[<=]]> #{param.weightMax}</if>
						    <if test="param.zodiac != null">and zodiac = #{param.zodiac}</if>
						    <if test="param.province != null">and province = #{param.province}</if>
						    <if test="param.idNo != null">and id_no like concat('%', #{param.idNo}, '%')}</if>
						    <if test="param.mobileNo != null">and mobile_no like concat('%', #{param.mobileNo}, '%')</if>
						    <if test="param.education != null">and education = #{param.education}</if>
						    <if test="param.tag != null">and tag like concat('%', #{param.tag}, '%')</if>
						    <if test="param.workType != null">and work_type like concat('%', #{param.workType}, '%')</if>
						    <if test="param.workingAgeMin != null">and working_age <![CDATA[>=]]> #{param.workingAgeMin}</if>
						    <if test="param.workingAgeMax != null">and working_age <![CDATA[<=]]> #{param.workingAgeMax}</if>
						    <if test="param.certification != null">and certification like concat('%', #{param.certification}, '%')</if>
						    <if test="param.expectedPayMin != null">and expected_pay <![CDATA[>=]]> #{param.expectedPayMin}</if>
						    <if test="param.expectedPayMax != null">and expected_pay <![CDATA[<=]]> #{param.expectedPayMax}</if>
				        </trim>
				    </if>
				</where>
				order by employee_Id
				limit #{offset},#{count}
		) e left join 
		(
		  select p.employee_id, max(p.picture_id) head
		    from certification_picture p
		   where p.picture_type = 'head'
		   group by p.employee_id
		) t on e.employee_id = t.employee_id
	</select>
	
	<insert id="add" useGeneratedKeys="true" keyProperty="employeeId" parameterType="org.cjh.ayinfo.entity.Employee">
	  insert into employee
	  <trim prefix="(" suffix=")" suffixOverrides=",">
	    <if test="employeeId != null">
	      employee_id,
	    </if>
	    <if test="employeeName != null">
	      employee_name,
	    </if>
	    <if test="gender != null">
	      gender,
	    </if>
	    <if test="birthday != null">
	      birthday,
	    </if>
	    <if test="age != null">
	      age,
	    </if>
	    <if test="zodiac != null">
	      zodiac,
	    </if>
	    <if test="height != null">
	      height,
	    </if>
	    <if test="weight != null">
	      weight,
	    </if>
	    <if test="province != null">
	      province,
	    </if>
	    <if test="idNo != null">
	      id_no,
	    </if>
	    <if test="mobileNo != null">
	      mobile_no,
	    </if>
	    <if test="education != null">
	      education,
	    </if>
	    <if test="tag != null">
	      tag,
	    </if>
	    <if test="workType != null">
	      work_type,
	    </if>
	    <if test="workingAge != null">
	      working_age,
	    </if>
	    <if test="certification != null">
	      certification,
	    </if>
	    <if test="expectedPay != null">
	      expected_pay,
	    </if>
	    <if test="pictureId != null">
	      picture_id,
	    </if>
	    <if test="addedDate != null">
	      added_date,
	    </if>
	    <if test="addedBy != null">
	      added_by,
	    </if>
	    <if test="updatedDate != null">
	      updated_date,
	    </if>
	    <if test="updatedBy != null">
	      updated_by,
	    </if>
	  </trim>
	  <trim prefix="values (" suffix=")" suffixOverrides=",">
	    <if test="employeeId != null">
	      #{employeeId,jdbcType=INTEGER},
	    </if>
	    <if test="employeeName != null">
	      #{employeeName,jdbcType=VARCHAR},
	    </if>
	    <if test="gender != null">
	      #{gender,jdbcType=VARCHAR},
	    </if>
	    <if test="birthday != null">
	      #{birthday,jdbcType=DATE},
	    </if>
	    <if test="age != null">
	      #{age,jdbcType=DOUBLE},
	    </if>
	    <if test="zodiac != null">
	      #{zodiac,jdbcType=VARCHAR},
	    </if>
	    <if test="height != null">
	      #{height,jdbcType=DOUBLE},
	    </if>
	    <if test="weight != null">
	      #{weight,jdbcType=DOUBLE},
	    </if>
	    <if test="province != null">
	      #{province,jdbcType=VARCHAR},
	    </if>
	    <if test="idNo != null">
	      #{idNo,jdbcType=VARCHAR},
	    </if>
	    <if test="mobileNo != null">
	      #{mobileNo,jdbcType=VARCHAR},
	    </if>
	    <if test="education != null">
	      #{education,jdbcType=VARCHAR},
	    </if>
	    <if test="tag != null">
	      #{tag,jdbcType=VARCHAR},
	    </if>
	    <if test="workType != null">
	      #{workType,jdbcType=VARCHAR},
	    </if>
	    <if test="workingAge != null">
	      #{workingAge,jdbcType=DOUBLE},
	    </if>
	    <if test="certification != null">
	      #{certification,jdbcType=VARCHAR},
	    </if>
	    <if test="expectedPay != null">
	      #{expectedPay,jdbcType=DOUBLE},
	    </if>
	    <if test="pictureId != null">
	      #{pictureId,jdbcType=VARCHAR},
	    </if>
	    <if test="addedDate != null">
	      #{addedDate,jdbcType=TIMESTAMP},
	    </if>
	    <if test="addedBy != null">
	      #{addedBy,jdbcType=VARCHAR},
	    </if>
	    <if test="updatedDate != null">
	      #{updatedDate,jdbcType=TIMESTAMP},
	    </if>
	    <if test="updatedBy != null">
	      #{updatedBy,jdbcType=VARCHAR},
	    </if>
	  </trim>
	</insert>
  
	<select id="count" parameterType="org.cjh.ayinfo.entity.Employee" resultType="int">
	      select count(*) from employee
		<where>
		       <trim prefixOverrides="and">
			    <if test="employeeId != null">and employee_Id = #{employeeId}</if>
			    <if test="employeeName != null">and employee_Name =#{employeeName}</if>
			    <if test="gender != null">and gender = #{gender}</if>
			    <if test="birthday != null">and birthday = #{birthday}</if>
			    <if test="age != null">and age = #{age}</if>
			    <if test="zodiac != null">and zodiac = #{zodiac}</if>
			    <if test="province != null">and province = #{province}</if>
			    <if test="idNo != null">and id_no = #{idNo}</if>
			    <if test="mobileNo != null">and mobile_No = #{mobileNo}</if>
			    <if test="education != null">and education = #{education}</if>
		       </trim>
		</where>
	</select>
  
    <select id="countFuzzy" parameterType="map" resultType="int">
        select count(*) from employee
		<where>
		    <if test="param != null">
		        <trim prefixOverrides="and">
				    <if test="param.employeeName != null">and employee_Name like concat('%', #{param.employeeName}, '%')</if>
				    <if test="param.gender != null">and gender = #{param.gender}</if>
				    <if test="param.birthdayMin != null">and birthday <![CDATA[>=]]> #{param.birthdayMin}</if>
				    <if test="param.birthdayMax != null">and birthday <![CDATA[<=]]> #{param.birthdayMax}</if>
				    <if test="param.ageMin != null">and age <![CDATA[>=]]> #{param.ageMin}</if>
				    <if test="param.ageMax != null">and age <![CDATA[<=]]> #{param.ageMax}</if>
				    <if test="param.heightMin != null">and height <![CDATA[>=]]> #{param.heightMin}</if>
				    <if test="param.heightMax != null">and height <![CDATA[<=]]> #{param.heightMax}</if>
				    <if test="param.weightMin != null">and weight <![CDATA[>=]]> #{param.weightMin}</if>
				    <if test="param.weightMax != null">and weight <![CDATA[<=]]> #{param.weightMax}</if>
				    <if test="param.zodiac != null">and zodiac = #{param.zodiac}</if>
				    <if test="param.province != null">and province = #{param.province}</if>
				    <if test="param.idNo != null">and id_no like concat('%', #{param.idNo}, '%')</if>
				    <if test="param.mobileNo != null">and mobile_No like concat('%', #{param.mobileNo}, '%')</if>
				    <if test="param.education != null">and education = #{param.education}</if>
				    <if test="param.tag != null">and tag like concat('%', #{param.tag}, '%')</if>
				    <if test="param.workType != null">and work_type like concat('%', #{param.workType}, '%')</if>
				    <if test="param.workingAgeMin != null">and working_age <![CDATA[>=]]> #{param.workingAgeMin}</if>
				    <if test="param.workingAgeMax != null">and working_age <![CDATA[<=]]> #{param.workingAgeMax}</if>
				    <if test="param.certification != null">and certification like concat('%', #{param.certification}, '%')</if>
				    <if test="param.expectedPayMin != null">and expected_pay <![CDATA[>=]]> #{param.expectedPayMin}</if>
				    <if test="param.expectedPayMax != null">and expected_pay <![CDATA[<=]]> #{param.expectedPayMax}</if>
		        </trim>
		    </if>
		</where>
  </select>
  
  <update id="update" parameterType="org.cjh.ayinfo.entity.Employee">
    update employee set 
      employee_name = #{employeeName,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=DATE},
      age = #{age,jdbcType=DOUBLE},
      zodiac = #{zodiac,jdbcType=VARCHAR},
      height = #{height,jdbcType=DOUBLE},
      weight = #{weight,jdbcType=DOUBLE},
      province = #{province,jdbcType=VARCHAR},
      id_no = #{idNo,jdbcType=VARCHAR},
      mobile_no = #{mobileNo,jdbcType=VARCHAR},
      education = #{education,jdbcType=VARCHAR},
      tag = #{tag,jdbcType=VARCHAR},
      work_type = #{workType,jdbcType=VARCHAR},
      working_age = #{workingAge,jdbcType=DOUBLE},
      certification = #{certification,jdbcType=VARCHAR},
      expected_pay = #{expectedPay,jdbcType=DOUBLE},
      picture_id = #{pictureId,jdbcType=VARCHAR},
      added_date = #{addedDate,jdbcType=TIMESTAMP},
      added_by = #{addedBy,jdbcType=VARCHAR},
      updated_date = #{updatedDate,jdbcType=TIMESTAMP},
      updated_by = #{updatedBy,jdbcType=VARCHAR}
    where employee_id = #{employeeId,jdbcType=INTEGER}
  </update>
  
  <update id="delete" parameterType="java.lang.Integer">
      delete from employee where employee_id = #{employeeId,jdbcType=INTEGER}
  </update>
</mapper>